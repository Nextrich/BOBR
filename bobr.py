import time
import telebot
import datetime
from telebot import types
import sqlite3
import bobr_time

def update_users():
	global users
	dbn = 'bobr_data.db'
	conn = sqlite3.connect(dbn)
	#else: print("error: don't connected to data base")
	cursor = conn.cursor()

	sqlite_users = """SELECT * FROM InPh"""
	cursor.execute(sqlite_users)
	users = cursor.fetchall()
	conn.commit()
	conn.close()
	print(users)

def update_events():
	global events, time_events
	dbn = 'bobr_data.db'
	conn = sqlite3.connect(dbn)
	#else: print("error: don't connected to data base")
	cursor = conn.cursor()
	sqlite_events = """SELECT * FROM InPh_events"""
	cursor.execute(sqlite_events)
	events = cursor.fetchall()
	sqlite_events = """SELECT time FROM InPh_events"""
	cursor.execute(sqlite_events)
	time_events = cursor.fetchall()
	conn.commit()
	conn.close()
	print(events)
	print(time_events)

def send_time_message(message, timer):
	for a in events:
		if a[3] == timer:
			bot,send_message(message.chat.id, f'–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —É –≤–∞—Å —Å—Ç–æ–∏—Ç –∑–∞–¥–∞—á–∞ {a[1]}: {a[2]} –Ω–∞ {a[3]}.')

date = datetime.datetime.today()

print("–∑–∞–ø—É—Å–∫ –ë–û–ë–†-–∞...")

print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:")
users =[]
update_users()
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–≤–µ–Ω—Ç–∞—Ö:")
events = []
time_events = []
update_events()

print('–¢–∞–±–ª–∏—Ü—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
print(date.strftime('%Y-%m-%d %H:%M'))

user_reg = False;

bot = telebot.TeleBot('API')

@bot.message_handler(content_types=['text'])
@bot.message_handler(content_types=['text', 'document', 'audio'])

def command_hendler(message):
	global users, user_reg

	if message.text == '/start':
		bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç–∏–∫–∏! –Ø - –ë–û–ë–† (–ë–æ—Ç –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ë–æ—Ä—å–±—ã –†—É—Å–ª–∞–Ω—á–∏–∫)!\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã - –∏—Å–ø–æ–ª—å–∑—É–π: "/info"')

	if message.text == "/register":
		new_user_name = message.from_user.first_name
		new_user_username = "@" + str(message.from_user.username)
		for a in users:
			if new_user_name in a and new_user_username in a or new_user_name in users and new_user_username in users:
				print(a)
				bot.reply_to(message, '–≠–π, ' + new_user_name + ', –æ–±–º–∞–Ω—É—Ç—å –†—É—Å–ª–∞–Ω—á–∏–∫–∞ –≤–∑–¥—É–º–∞–ª!?!?!?!?\n\n–Ø —Ç–∞–∫–æ–≥–æ –Ω–µ –¥–æ–ø—É—â—É! –ù–∏–∫—Ç–æ –Ω–µ —Å–º–µ–µ—Ç –æ–±–º–∞–Ω—ã–≤–∞—Ç—å –±–æ–±—Ä–∞! –¢—ã —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ\n\n>:(')
				print(users)
				return()
		if user_reg == False:
			dbn = 'bobr_data.db'
			conn = sqlite3.connect(dbn)
			cursor = conn.cursor()
			sqlite_users = f"""INSERT INTO InPh(users,  usernames) VALUES ('{new_user_name}', '{new_user_username}')"""
			cursor.execute(sqlite_users)
			conn.commit()
			conn.close()
			users.append(new_user_name)
			users.append("@" + str(new_user_username))
			bot.reply_to(message, '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
			bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É, ' + new_user_name + ')))')
			update_users()
			print(users)
			user_reg = True;
			return()

	if message.text == '/event':
		name = ''
		text = ''
		time =  ''
		bot.reply_to(message, '–í–∏–∂—É, –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ —ç–≤–µ–Ω—Ç–∞–º–∏? –ù—É, –ø–æ–µ–º—É –±—ã –∏ –Ω–µ—Ç! –ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º –µ–≥–æ?')
		@bot.message_handler(content_types=['text'])

		def name_event(message):
			global name
			name = message.text
			bot.reply_to(message, '–ö–ª–∞—Å—Å, —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–∞ –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å (—Å–æ–≤–µ—Ç—É—é –ø–∏–Ω–≥–∞–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç–≤–µ–Ω—Ç–∞).')
			@bot.message_handler(content_types=['text'])
			def text_event(message):
				global text
				text = message.text
				bot.reply_to(message, '–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è —ç–≤–µ–Ω—Ç–∞! –°–¥–µ–ª–∞–π —ç—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ: "–Ω–æ–º–µ—Ä_–º–µ—Å—è—Ü–∞-—á–∏—Å–ª–æ —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã"(10-26 22:22).')
				@bot.message_handler(content_types=['text'])
				def time_event(message):
					global time, name, text, events
					time = message.text
					bot.reply_to(message, f'–ò—Ç–∞–∫, —ç–≤–µ–Ω—Ç {name} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {time}, —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {text}.')
					dbn = 'bobr_data.db'
					conn = sqlite3.connect(dbn)
					cursor = conn.cursor()
					sqlite_events = f"""INSERT INTO InPh_events(name, text, time) VALUES ('{name}', '{text}', '{time}')"""
					cursor.execute(sqlite_events)
					conn.commit()
					conn.close()
					update_events()
				bot.register_next_step_handler(message, time_event)
				x = bobr_time.time_update()
				y = bobr_time.timer()
			bot.register_next_step_handler(message, text_event)

		bot.register_next_step_handler(message, name_event)

	if message.text == '/delete_event':
		name_delete_event = ''
		bot.reply_to(message, '–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª, –∞ –Ω–µ –∑–∞–±–∏–ª, –≤–µ–¥—å —Ç–∞–∫?ü§îü§îü§î\n\n–û–∫–µ–π, –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–≤–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å. –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –µ–≥–æ –∑–∞—Ä–∞–Ω–µ–µ, –Ω–∞–ø–∏—à–∏ /cancel.')
		@bot.message_handler(content_types=['text'])
		def delete_event(message):
			if message.text == "/cancel":
				pass
			else:
				name_delete_event = message.text
				for a in events:
					if a[1] == name_delete_event:
						dbn = 'bobr_data.db'
						conn = sqlite3.connect(dbn)
						cursor = conn.cursor()
						sqlite_events = f"""DELETE FROM InPh_events WHERE name='{name_delete_event}'"""
						cursor.execute(sqlite_events)
						conn.commit()
						conn.close()
						update_events()
						bot.reply_to(message, f'–û–∫–∏-–¥–æ–∫–∏, —ç–≤–µ–Ω—Ç {name_delete_event} —É–¥–∞–ª—ë–Ω! (–ñ–∞–ª–∫–æ —ç—Ç–æ–≥–æ –¥–æ–±—Ä—è–∫–∞).')
		bot.register_next_step_handler(message, delete_event)

	if message.text == '/events':
		all_events = ''
		for a in events:
			all_events += f'"{a[1]}", –¥–∞—Ç–∞: {a[3]}, –∑–∞–¥–∞—á–∞: {a[2]};\n'
		bot.reply_to(message, f'''–•–º, –¥–∞–π—Ç–µ-–∫–∞ –≥–ª—è–Ω—É—Ç—å, –≤ –º–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –¥–æ–ª–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø—ã–ª–∏—Ç—å—Å—èü§ìü§ìü§ì
			–ò—Ç–∞–∫, –ø–æ –ø–ª–∞–Ω–∞–º —É –Ω–∞—Å:

			{all_events}
			–ö–∞–∫-—Ç–æ —Ç–∞–∫)''')

	if message.text == '/info':
		bot.reply_to(message,'''–í–æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∏—Ä–∞—Ç—Å–∫–æ–≥–æ —Ä–∞–∑–æ–≥–Ω–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ë–û–ë–†-–∞ –†—É—Å–ª–∞–Ω—á–∏–∫–∞üòâ

			/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–±—è (—É—á–∞—Å—Ç–Ω–∏–∫–∞) –≤ –∫–æ–º–∞–Ω–¥–µ!
			/event - –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–±—â–∏–π —ç–≤–µ–Ω—Ç)))
			/delete_event - —É–¥–∞–ª—è–µ—Ç —ç–≤–µ–Ω—Ç(((
			/events - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–≤–µ–Ω—Ç–æ–≤!
			/command - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.(–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∫–∞ —á—Ç–æ)''')
bot.polling(none_stop=True, interval=1)